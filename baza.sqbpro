<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="baza.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser query pragmas" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2328"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Attendance" custom_title="0" dock_id="1" table="4,10:mainAttendance"/><table title="Users" custom_title="0" dock_id="2" table="4,5:mainUsers"/><dock_state state="000000ff00000000fd00000001000000020000043c000002b6fc0100000001fc000000000000043c0000012800fffffffa000000010100000002fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000012800fffffffb000000160064006f0063006b00420072006f00770073006500320100000000ffffffff0000012800ffffff000002680000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Attendance" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="70"/><column index="3" value="68"/><column index="4" value="33"/><column index="5" value="43"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Teachers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="52"/><column index="3" value="70"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Users" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="64"/><column index="3" value="39"/><column index="4" value="62"/><column index="5" value="49"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- ROLENI BOSHQARISH (Admin, Student, Teacher, Employee)
CREATE TABLE Roles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL
);

INSERT INTO Roles (name) VALUES 
('Admin'), ('Student'), ('Teacher'), ('Employee');

-- FOYDALANUVCHI ASOSIY MA'LUMOTLARI
CREATE TABLE Users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role_id INTEGER NOT NULL,
    FOREIGN KEY (role_id) REFERENCES Roles(id)
);

-- FAKULTETLAR
CREATE TABLE Faculty (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL
);

-- KAFEDRALAR
CREATE TABLE Kafedra (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    faculty_id INTEGER NOT NULL,
    FOREIGN KEY (faculty_id) REFERENCES Faculty(id)
);

-- FANLAR (SCIENCES)
CREATE TABLE Sciences (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    kafedra_id INTEGER NOT NULL,
    FOREIGN KEY (kafedra_id) REFERENCES Kafedra(id)
);

-- GURUHLAR
CREATE TABLE Groups (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    faculty_id INTEGER NOT NULL,
    kafedra_id INTEGER NOT NULL,
    FOREIGN KEY (faculty_id) REFERENCES Faculty(id),
    FOREIGN KEY (kafedra_id) REFERENCES Kafedra(id)
);

-- STUDENTLAR (USER bilan bog'liq)
CREATE TABLE Students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE NOT NULL,
    group_id INTEGER NOT NULL,
    admission_year INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (group_id) REFERENCES Groups(id)
);

-- TEACHERLAR (USER bilan bog'liq)
CREATE TABLE Teachers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE NOT NULL,
    kafedra_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (kafedra_id) REFERENCES Kafedra(id)
);

-- EMPLOYEES (USER bilan bog'liq)
CREATE TABLE Employees (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE NOT NULL,
    position TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id)
);

-- SEMESTR VA FANLAR ULASH
CREATE TABLE Semester (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,          -- Masalan: &quot;1-semestr&quot;
    year INTEGER NOT NULL
);

CREATE TABLE TeacherSubjects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    teacher_id INTEGER NOT NULL,
    science_id INTEGER NOT NULL,
    semester_id INTEGER NOT NULL,
    FOREIGN KEY (teacher_id) REFERENCES Teachers(id),
    FOREIGN KEY (science_id) REFERENCES Sciences(id),
    FOREIGN KEY (semester_id) REFERENCES Semester(id)
);

-- STUDENTLARNING BAHOLARI
CREATE TABLE StudentGrades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    science_id INTEGER NOT NULL,
    semester_id INTEGER NOT NULL,
    grade INTEGER CHECK (grade &gt;= 0 AND grade &lt;= 100),
    FOREIGN KEY (student_id) REFERENCES Students(id),
    FOREIGN KEY (science_id) REFERENCES Sciences(id),
    FOREIGN KEY (semester_id) REFERENCES Semester(id)
);

-- DAVOMAD (HAR KUNLIK)
CREATE TABLE Attendance (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    science_id INTEGER NOT NULL,
    date DATE NOT NULL,
    status TEXT CHECK (status IN ('Present','Absent','Late')) NOT NULL,
    FOREIGN KEY (student_id) REFERENCES Students(id),
    FOREIGN KEY (science_id) REFERENCES Sciences(id)
);

-- DASHBOARD uchun ko'rinishlar (guruh -&gt; studentlar -&gt; baho/davomad)
-- Masalan:
-- 1) Guruhlarni olish -&gt; Groups
-- 2) Guruhdagi studentlarni olish -&gt; Students
-- 3) Studentning davomadi va bahosi -&gt; Attendance, StudentGrades
</sql><current_tab id="0"/></tab_sql></sqlb_project>
